#!/bin/bash
#
# testbed/cluster discovery and validation
# 	1. Discover cluster_type, num_workers and num_cpus (per worker)
# 	2. Confitm the user-intent workers specified in lab.config.
#
source ${REG_ROOT}/lab.config

# the number of 
RESERVED_CPUS=4

# Define the JSON content
tb_info='{
    "CLUSTER_TYPE":			"value1",
    "NUM_WORKERS": 			"value3",
    "ALLOCATABLE_CPUS": 	"value3",
    "USEABLE_CPUS": 		"value3"
}'

function f_verify_lab_config {
    # Verify a few common missed setup activities.
    #   REG_KNI_USER (root vs kni)
    #   All export vars (most likely b/c user forgot to fixup lab.config)
    #   SRIOV-config (user has not invoked "make init") - we can do it, but let the user do it.
    #   PAO-config (user has not invoked "make init")

    local DEST="$REG_KNI_USER@$REG_OCPHOST"
    workers=$(ssh $DEST "oc get nodes --selector='node-role.kubernetes.io/worker' -o jsonpath='{.items[*].metadata.name}'")
    if [ $? -ne 0 ] ; then
        echo "Cannot ssh to bastion $DEST" >&2
        exit 1
    fi
    if [[ !  "$workers" == *"$OCP_WORKER_0"* ]]; then
        echo "OCP_WORKER_0=$OCP_WORKER_0 is NOT in '$workers'"  >&2
        echo "Check lab.config on both sides"  >&2
        exit 1
    fi
    if [[ !  "$workers" == *"$OCP_WORKER_1"* ]]; then
        echo "OCP_WORKER_0=$OCP_WORKER_1 is NOT in '$workers'"  >&2
        echo "Check lab.config on both sides"  >&2
        exit
    fi
    if [[ !  "$workers" == *"$OCP_WORKER_2"* ]]; then
        echo "OCP_WORKER_0=$OCP_WORKER_2 is NOT in '$workers'"  >&2
        echo "Check lab.config on both sides"  >&2
        exit 1
    fi

    # Check lab.config consistency
    reg_dir=$(basename "$REG_ROOT")
    rem_exports=$(ssh $DEST "cd $reg_dir && cat lab.config | grep export")
    local_exports=$(cd $REG_ROOT && cat lab.config | grep export)
    if [ "$rem_exports" != "$local_exports" ]; then
        echo "ERROR: $reg_dir/lab.config file on controller differs the one on the bastion" >&2
    fi

    # Check SRIOV-config and PAO-config ready on the bastion
    file=$(ssh $DEST "cd $reg_dir && source bootstrap.sh && cd SRIOV-config/UNIV && ls setting.env")
    if [ -z "$file" ] ; then
        echo "ERROR: SRIOV-config/UNIV is not yet initialized on the bastion" >&2
        echo "Hint: go to $reg_dir/SRIOV-config/UNIV on the bastion and 'make init'" >&2
        exit 1
    fi

    file=$(ssh $DEST "cd $reg_dir && source bootstrap.sh && cd PAO-config && ls setting.env")
    if [ -z "$file" ] ; then
        echo "ERROR: PAO-config is not yet initialized on the bastion" >&2
        echo "Hint: go to $reg_dir/PAO-config on the bastion and 'make init'" >&2
        exit 1
    fi
}

if [ "$(hostname)" != "$REG_OCPHOST" ]; then
    echo "Running on on the controller ... check lab.config match" >&2
    if f_verify_lab_config -ne 0 ; then
        exit
    fi
else
    echo "Running on the bastion ... skip lab.config match check" >&2
fi


function f_update_tb_info {
	# Read the JSON file
	json=$tb_info
	updated_json=$(echo "$json" | jq ".CLUSTER_TYPE = \"$tb_cluster_type\" | .NUM_WORKERS = \"$tb_num_workers\" \
								 | .ALLOCATABLE_CPUS = \"$tb_alloc_cpus\" |  .USEABLE_CPUS = \"$tb_useable_cpus\"")
	# Write the JSON content to a file
	echo "$updated_json" 
}

function f_get_cluster_type {
	# number of node is 1 or 3 or more
	num_node="$(ssh $REG_KNI_USER@$REG_OCPHOST "kubectl get nodes --no-headers" | wc -l)"
	case $num_node in
		1)
			echo "SNO"
			;;
		3)
			echo "COMPACT"
			;;
		*)
			echo "STANDARD"
			;;
	esac
}

function f_validate_worker_nodes {
	workers="$(ssh $REG_KNI_USER@$REG_OCPHOST "kubectl get nodes --no-headers --selector=node-role.kubernetes.io/worker=")"
	tb_num_workers=$(echo "$workers" | wc -l)
	worker_names=$(echo "$workers" | awk '{print $1}')
	#echo names=$worker_names
	# verify workers in lab.conf
	if [[ "$worker_names" != *"$OCP_WORKER_0"* ]]; then
		echo "Please correct OCP_WORKER_0=\"$OCP_WORKER_0\" var in lab.config. Worker nodes are $worker_names" >&2
		exit 1
	fi
	if [[ "$worker_names" != *"$OCP_WORKER_1"* ]]; then
		echo "Please correct OCP_WORKER_1=\"$OCP_WORKER_1\" var in lab.config. Worker nodes are $worker_names" >&2
		exit 1
	fi
	if [[ "$worker_names" != *"$OCP_WORKER_2"* ]]; then
		echo "Please correct OCP_WORKER_2=\"$OCP_WORKER_2\" var in lab.config. Worker nodes are $worker_names" >&2
		exit 1
	fi
}

# Let's go 
if ! ssh $REG_KNI_USER@$REG_OCPHOST oc get node  &>/dev/null ; then
	echo "Error: Please confirm REG_KNI_USER and REG_OCPHOST in lab.config" >&2
	exit 1
fi

tb_cluster_type=$(f_get_cluster_type)
f_validate_worker_nodes
first_worker="$(echo $worker_names | awk '{print $1}')"
tb_alloc_cpus="$(ssh $REG_KNI_USER@$REG_OCPHOST "kubectl get node/$first_worker -ojsonpath='{.status.allocatable.cpu}'")"
# Round-down to whole CPU if we see like 31500m
if [[ "$tb_alloc_cpus" == *m ]]; then
    tb_alloc_cpus="${tb_alloc_cpus:0: -4}"
fi

tb_useable_cpus=$(($tb_alloc_cpus-$RESERVED_CPUS))
f_update_tb_info

echo "lab-analyzer completed" >&2

# done
